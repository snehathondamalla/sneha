# -*- coding: utf-8 -*-
"""DiabetesPredictioncode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NwYjEpO3lTkt4dCz52AtvOB1i4FWlewR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn import metrics
from sklearn.metrics import classification_report
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

diabetes_df = pd.read_csv("/diabetes.csv")
diabetes_df.head()
diabetes_df.columns
diabetes_df.info()
diabetes_df.describe()
diabetes_df.describe().T
diabetes_df.isnull().head(10)
diabetes_df.isnull().sum()

diabetes_df_copy=diabetes_df.copy(deep=True)
diabetes_df_copy[ ['Glucose','BloodPressure','SkinThickness','Insulin','BMI'] ] = diabetes_df_copy[ ['Glucose','BloodPressure','SkinThickness','Insulin','BMI'] ].replace(0,np.NaN)

print(diabetes_df_copy.isnull().sum())

diabetes_df_copy['Glucose'].fillna(diabetes_df_copy['Glucose'].mean(), inplace=True)
diabetes_df_copy['BloodPressure'].fillna(diabetes_df_copy['BloodPressure'].mean(), inplace = True)
diabetes_df_copy['SkinThickness'].fillna (diabetes_df_copy['SkinThickness'].median(), inplace = True)
diabetes_df_copy['Insulin']. fillna (diabetes_df_copy [ 'Insulin'].median(), inplace=True)
diabetes_df_copy [ 'BMI'].fillna (diabetes_df_copy ['BMI'].median(), inplace = True)
color_wheel = {1: "#0392cf", 2: "#7bc043"}
colors = diabetes_df["Outcome"].map(lambda x: color_wheel.get(x + 1))

print(diabetes_df.Outcome.value_counts())

p=diabetes_df.Outcome.value_counts().plot(kind="bar")
plt.subplot(121), sns. distplot(diabetes_df['Insulin'])
plt.subplot(122), diabetes_df['Insulin'].plot.box(figsize=(16,5))
plt.show()
plt.figure(figsize=(12,10))

p=sns.heatmap(diabetes_df.corr(), annot=True, cmap = 'RdYlGn')
sc_X = StandardScaler()
x = pd.DataFrame(sc_X.fit_transform(diabetes_df_copy.drop(["Outcome"], axis= 1),), columns=['Pregnancies','Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'])
x.head()
y = diabetes_df_copy.Outcome
y

x = diabetes_df.drop('Outcome', axis=1)
y = diabetes_df[ 'Outcome']
from sklearn.model_selection import train_test_split
x_train, X_test, y_train, y_test = train_test_split(x,y, test_size = 0.33 , random_state=7)
from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(n_estimators = 200)
rfc.fit(x_train,y_train)
rfc_train = rfc.predict(x_train)
from sklearn import metrics
print("Accuracy_Score =", format(metrics.accuracy_score (y_train, rfc_train)))
from sklearn import metrics

predictions = rfc.predict(X_test)
print("Accuracy_Score =", format (metrics.accuracy_score (y_test, predictions)))
from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, predictions))
print(classification_report (y_test, predictions))

from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier()
dtree.fit(x_train, y_train)
from sklearn import metrics
predictions = dtree.predict(X_test)
print("Accuracy Score =", format (metrics.accuracy_score (y_test, predictions)))
from sklearn.metrics import classification_report, confusion_matrix

print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))
from sklearn.svm import SVC

svc_model = SVC()
svc_model.fit(x_train, y_train)
svc_pred = svc_model.predict(X_test)
from sklearn import metrics
print("Accuracy Score =", format (metrics.accuracy_score (y_test, svc_pred)))
from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, svc_pred))
print(classification_report(y_test, svc_pred))

rfc.feature_importances_(pd.Series(rfc.feature_importances_,index=x.columns).plot(kind='barh'))
import pickle
saved_model = pickle.dumps (rfc)
rfc_from_pickle = pickle.loads(saved_model)

rfc_from_pickle.predict(X_test)
rfc.predict([[0,137,40,35,16,43.1,2.228,33]])

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=200)
rfc.fit(X_train, y_train)

rfc_train = rfc.predict(X_train)
from sklearn import metrics
print("Accuracy_Score =", format (metrics.accuracy_score (y_train, rfc_train)))

rfc_train = rfc.predict(X_train)
from sklearn import metrics
print("Accuracy_Score =", format (metrics.accuracy_score (y_train, rfc_train)))

from sklearn.tree import DecisionTreeClassifier
dtree=DecisionTreeClassifier()
dtree.fit(X_train, y_train)

from sklearn import metrics
predictions=dtree.predict(X_test)
print("Accuracy Score =", format(metrics.accuracy_score (y_test,predictions)))

from sklearn.svm import SVC
svc_model=SVC()
svc_model.fit(X_train,y_train)

svc_pred = svc_model.predict(X_test)

from sklearn import metrics
print("Accuracy Score =", format (metrics.accuracy_score (y_test, svc_pred)))

rfc.predict([[0,137,40,35,168,43.1,2.228,33]])

rfc.predict([[10,101,76,48,180,32.9,0.171,63]])









